---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: generate-pipeline-sa-policy
spec:
  generateExisting: true
  rules:
  - name: generate-pipeline-sa-rule
    match:
      resources:
        kinds: ["Namespace"]
        selector:
          matchLabels:
            tekton-enabled: "true"
    generate:
      synchronize: true
      apiVersion: v1
      kind: ServiceAccount
      name: pipeline
      namespace: "{{ request.object.metadata.name }}"
      data:
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: pipeline
        secrets: [
          {name: git-credentials},
          {name: registry-creds}
        ]
        imagePullSecrets: [
          {name: registry-creds}
        ]

  - name: generate-shared-pvc
    match:
      resources:
        kinds: ["Namespace"]
        selector:
          matchLabels:
            tekton-enabled: "true"
    generate:
      synchronize: false
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: shared-data
      namespace: "{{ request.object.metadata.name }}"
      data:
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: shared-data
          namespace: "{{ request.object.metadata.name }}"
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 5Gi
    preconditions:
      all:
        - key: "{{ request.operation || 'CREATE' }}"
          operator: Equals
          value: "CREATE"

  - name: generate-cache-pvc
    match:
      resources:
        kinds: ["Namespace"]
        selector:
          matchLabels:
            tekton-enabled: "true"
    generate:
      synchronize: false
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: cache-data
      namespace: "{{ request.object.metadata.name }}"
      data:
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: cache-data
          namespace: "{{ request.object.metadata.name }}"
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
    preconditions:
      all:
        - key: "{{ request.operation || 'CREATE' }}"
          operator: Equals
          value: "CREATE"

---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: generate-tekton-rbac-policy
spec:
  generateExisting: true
  background: true
  rules:
    - name: generate-tekton-role-rule
      match:
        resources:
          kinds: ["Namespace"]
          selector:
            matchLabels:
              tekton-enabled: "true"
      generate:
        synchronize: true
        apiVersion: rbac.authorization.k8s.io/v1
        kind: Role
        name: tekton-pipeline-runner
        namespace: "{{ request.object.metadata.name }}"
        data:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: Role
          metadata:
            name: tekton-pipeline-runner
            namespace: "{{ request.object.metadata.name }}"
          rules:
            - apiGroups: ["tekton.dev"]
              resources: ["pipelineruns", "taskruns"]
              verbs: ["create", "get", "list", "watch"]
            - apiGroups: [""]
              resources: ["secrets", "configmaps", "serviceaccounts"]
              verbs: ["get", "list", "watch"]
            - apiGroups: ["triggers.tekton.dev"]
              resources: ["eventlisteners", "triggerbindings", "triggertemplates"]
              verbs: ["get", "list", "watch"]

    - name: generate-tekton-rolebinding-rule
      match:
        resources:
          kinds: ["Namespace"]
          selector:
            matchLabels:
              tekton-enabled: "true"
      generate:
        synchronize: true
        apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        name: tekton-pipeline-runner-binding
        namespace: "{{ request.object.metadata.name }}"
        data:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: RoleBinding
          metadata:
            name: tekton-pipeline-runner-binding
            namespace: "{{ request.object.metadata.name }}"
          subjects:
            - kind: ServiceAccount
              name: pipeline
              namespace: "{{ request.object.metadata.name }}"
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: Role
            name: tekton-pipeline-runner
    - name: generate-tekton-clusterrolebinding
      match:
        resources:
          kinds: ["Namespace"]
          selector:
            matchLabels:
              tekton-enabled: "true"
      generate:
        synchronize: true
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        name: tekton-triggers-pipeline-access-{{ request.object.metadata.name }}
        data:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: tekton-triggers-pipeline-access-{{ request.object.metadata.name }}
          subjects:
            - kind: ServiceAccount
              name: pipeline
              namespace: "{{ request.object.metadata.name }}"
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: tekton-triggers-resource-reader
